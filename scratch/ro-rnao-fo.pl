% Automatically generated by cltools
% forall([x, y, z], if(and(part_of(x, y), part_of(y, z)), part_of(x, z)))
part_of(X, Z) :- part_of(X, Y), part_of(Y, Z).

% forall([x, y, z, t], if(and(part_of(x, y, t), part_of(y, z, t)), part_of(x, z, t)))
part_of(X, Z, T) :- part_of(X, Y, T), part_of(Y, Z, T).

% forall([a, b], if(exists([a, b], part_of(a, b)), part_of(a, a)))
% forall([a, b, a, b], if(part_of(a, b), part_of(a, a)))
part_of(A, A) :- part_of(A, B).

% forall([a, b, t], if(exists([a, b, t], part_of(a, b, t)), part_of(a, a, t)))
% forall([a, b, t, a, b, t], if(part_of(a, b, t), part_of(a, a, t)))
part_of(A, A, T) :- part_of(A, B, T).

% forall([a, b], iff(part_of(a, b), has_part(b, a)))
% and(forall([a, b], if(part_of(a, b), has_part(b, a))), forall([a, b], if(has_part(b, a), part_of(a, b))))
has_part(B, A) :- part_of(A, B).

part_of(A, B) :- has_part(B, A).

% forall([a, b, t], iff(part_of(a, b, t), has_part(b, a, t)))
% and(forall([a, b, t], if(part_of(a, b, t), has_part(b, a, t))), forall([a, b, t], if(has_part(b, a, t), part_of(a, b, t))))
has_part(B, A, T) :- part_of(A, B, T).

part_of(A, B, T) :- has_part(B, A, T).

% forall([x, y, z], if(covalently_bonded_to(x, y), covalently_bonded_to(y, x)))
covalently_bonded_to(Y, X) :- covalently_bonded_to(X, Y).

% forall([x, y], iff(overlaps(x, y), exists([z], and(part_of(z, x), part_of(z, y)))))
% and(forall([x, y], if(overlaps(x, y), exists([z], and(part_of(z, x), part_of(z, y))))), forall([x, y], if(exists([z], and(part_of(z, x), part_of(z, y))), overlaps(x, y))))
% forall([x, y, z], if(and(part_of(z, x), part_of(z, y)), overlaps(x, y)))
overlaps(X, Y) :- part_of(Z, X), part_of(Z, Y).

% forall([x, p], iff(sum_of_collection(x, p), forall([z], iff(overlaps(z, x), exists([y], and(member_of(y, p), overlaps(y, z)))))))
% and(forall([x, p], if(sum_of_collection(x, p), forall([z], iff(overlaps(z, x), exists([y], and(member_of(y, p), overlaps(y, z))))))), forall([x, p], if(forall([z], iff(overlaps(z, x), exists([y], and(member_of(y, p), overlaps(y, z))))), sum_of_collection(x, p))))
sum_of_collection(X, P) :- \+(overlaps(Z, X), \+(member_of(Y, P), overlaps(Y, Z))), \+(member_of(Y, P), overlaps(Y, Z), \+(overlaps(Z, X))).

% forall([x], iff(mereologically_maximal(x), forall([y], if(overlaps(y, x), part_of(y, x)))))
% and(forall([x], if(mereologically_maximal(x), forall([y], if(overlaps(y, x), part_of(y, x))))), forall([x], if(forall([y], if(overlaps(y, x), part_of(y, x))), mereologically_maximal(x))))
mereologically_maximal(X) :- \+(overlaps(Y, X), \+(part_of(Y, X))).

% forall([y, z], iff(q1_connected_to(y, z), and(instance_of(y, atom), instance_of(z, atom), covalently_bonded_to(y, z))))
% and(forall([y, z], if(q1_connected_to(y, z), and(instance_of(y, atom), instance_of(z, atom), covalently_bonded_to(y, z)))), forall([y, z], if(and(instance_of(y, atom), instance_of(z, atom), covalently_bonded_to(y, z)), q1_connected_to(y, z))))
% and(forall([y, z], if(q1_connected_to(y, z), instance_of(y, atom))), forall([y, z], if(q1_connected_to(y, z), instance_of(z, atom))), forall([y, z], if(q1_connected_to(y, z), covalently_bonded_to(y, z))))
instance_of(Y, atom) :- q1_connected_to(Y, Z).

instance_of(Z, atom) :- q1_connected_to(Y, Z).

covalently_bonded_to(Y, Z) :- q1_connected_to(Y, Z).

q1_connected_to(Y, Z) :- instance_of(Y, atom), instance_of(Z, atom), covalently_bonded_to(Y, Z).

% forall([x, y, z], if(q1_connected_to(x, y), q1_connected_to(y, x)))
q1_connected_to(Y, X) :- q1_connected_to(X, Y).

% not(exists([x], q1_connected_to(x, x)))
% not(exists([x, t], q1_connected_to(x, x, t)))
% forall([x, y], if(q1_connected_to(x, y), q1_reachable(x, y)))
q1_reachable(X, Y) :- q1_connected_to(X, Y).

% forall([x, y, t], if(q1_connected_to(x, y, t), q1_reachable(x, y, t)))
q1_reachable(X, Y, T) :- q1_connected_to(X, Y, T).

% forall([x, y, z], if(and(q1_reachable(x, y), q1_reachable(y, z)), q1_reachable(x, z)))
q1_reachable(X, Z) :- q1_reachable(X, Y), q1_reachable(Y, Z).

% forall([x, y, z, t], if(and(q1_reachable(x, y, t), q1_reachable(y, z, t)), q1_reachable(x, z, t)))
q1_reachable(X, Z, T) :- q1_reachable(X, Y, T), q1_reachable(Y, Z, T).

% forall([x, p], iff(q1_connected_sum_of(x, p), and(atom_collection(p), sum_of_collection(x, p), forall([y, z], if(and(member_of(y, p), member_of(z, p)), q1_reachable(y, z))))))
% and(forall([x, p], if(q1_connected_sum_of(x, p), and(atom_collection(p), sum_of_collection(x, p), forall([y, z], if(and(member_of(y, p), member_of(z, p)), q1_reachable(y, z)))))), forall([x, p], if(and(atom_collection(p), sum_of_collection(x, p), forall([y, z], if(and(member_of(y, p), member_of(z, p)), q1_reachable(y, z)))), q1_connected_sum_of(x, p))))
% and(forall([x, p], if(q1_connected_sum_of(x, p), atom_collection(p))), forall([x, p], if(q1_connected_sum_of(x, p), sum_of_collection(x, p))), forall([x, p], if(q1_connected_sum_of(x, p), forall([y, z], if(and(member_of(y, p), member_of(z, p)), q1_reachable(y, z))))))
atom_collection(P) :- q1_connected_sum_of(X, P).

sum_of_collection(X, P) :- q1_connected_sum_of(X, P).

q1_connected_sum_of(X, P) :- atom_collection(P), sum_of_collection(X, P), \+(member_of(Y, P), member_of(Z, P), \+(q1_reachable(Y, Z))).

% forall([x], iff(pmolecule(p, x), and(q_connected_sum_of(x, p), mereologically_maximal(x))))
% and(forall([x], if(pmolecule(p, x), and(q_connected_sum_of(x, p), mereologically_maximal(x)))), forall([x], if(and(q_connected_sum_of(x, p), mereologically_maximal(x)), pmolecule(p, x))))
% and(forall([x], if(pmolecule(p, x), q_connected_sum_of(x, p))), forall([x], if(pmolecule(p, x), mereologically_maximal(x))))
q_connected_sum_of(X, p) :- pmolecule(p, X).

mereologically_maximal(X) :- pmolecule(p, X).

pmolecule(p, X) :- q_connected_sum_of(X, p), mereologically_maximal(X).

% forall([x], iff(instance_of(x, molecule), exists([p], pmolecule(p, x))))
% and(forall([x], if(instance_of(x, molecule), exists([p], pmolecule(p, x)))), forall([x], if(exists([p], pmolecule(p, x)), instance_of(x, molecule))))
% forall([x, p], if(pmolecule(p, x), instance_of(x, molecule)))
instance_of(X, molecule) :- pmolecule(P, X).

% forall([x, y], iff(sub_molecule_of(y, x), exists([p, r], and(collection(p), collection(r), q1_connected_sum_of(y, r), q1_connected_sum_of(x, p), sub_collection_of(r, p)))))
% and(forall([x, y], if(sub_molecule_of(y, x), exists([p, r], and(collection(p), collection(r), q1_connected_sum_of(y, r), q1_connected_sum_of(x, p), sub_collection_of(r, p))))), forall([x, y], if(exists([p, r], and(collection(p), collection(r), q1_connected_sum_of(y, r), q1_connected_sum_of(x, p), sub_collection_of(r, p))), sub_molecule_of(y, x))))
% forall([x, y, p, r], if(and(collection(p), collection(r), q1_connected_sum_of(y, r), q1_connected_sum_of(x, p), sub_collection_of(r, p)), sub_molecule_of(y, x)))
sub_molecule_of(Y, X) :- collection(P), collection(R), q1_connected_sum_of(Y, R), q1_connected_sum_of(X, P), sub_collection_of(R, P).

% forall([a, b], iff(sub_collection_of(a, b), forall([x], if(member_of(x, a), member_of(x, b)))))
% and(forall([a, b], if(sub_collection_of(a, b), forall([x], if(member_of(x, a), member_of(x, b))))), forall([a, b], if(forall([x], if(member_of(x, a), member_of(x, b))), sub_collection_of(a, b))))
sub_collection_of(A, B) :- \+(member_of(X, A), \+(member_of(X, B))).

% forall([x, y], iff(q2_connected_to(x, y), and(molecular_level(x), molecular_level(y), not(covalently_bonded_to(x, y)), interacts_with(x, y))))
% and(forall([x, y], if(q2_connected_to(x, y), and(molecular_level(x), molecular_level(y), not(covalently_bonded_to(x, y)), interacts_with(x, y)))), forall([x, y], if(and(molecular_level(x), molecular_level(y), not(covalently_bonded_to(x, y)), interacts_with(x, y)), q2_connected_to(x, y))))
% and(forall([x, y], if(q2_connected_to(x, y), molecular_level(x))), forall([x, y], if(q2_connected_to(x, y), molecular_level(y))), forall([x, y], if(q2_connected_to(x, y), not(covalently_bonded_to(x, y)))), forall([x, y], if(q2_connected_to(x, y), interacts_with(x, y))))
molecular_level(X) :- q2_connected_to(X, Y).

molecular_level(Y) :- q2_connected_to(X, Y).

interacts_with(X, Y) :- q2_connected_to(X, Y).

q2_connected_to(X, Y) :- molecular_level(X), molecular_level(Y), \+(covalently_bonded_to(X, Y)), interacts_with(X, Y).

% forall([x], iff(molecular_level(x), or(instance_of(x, atom), instance_of(x, sub_molecule), instance_of(x, molecule))))
% and(forall([x], if(molecular_level(x), or(instance_of(x, atom), instance_of(x, sub_molecule), instance_of(x, molecule)))), forall([x], if(or(instance_of(x, atom), instance_of(x, sub_molecule), instance_of(x, molecule)), molecular_level(x))))
or(instance_of(X, atom), instance_of(X, sub_molecule), instance_of(X, molecule)) :- molecular_level(X).

molecular_level(X) :- instance_of(X, atom); instance_of(X, sub_molecule); instance_of(X, molecule).

% forall([x, y, z], if(q2_connected_to(x, y), q2_connected_to(y, x)))
q2_connected_to(Y, X) :- q2_connected_to(X, Y).

